import click
from rich.console import Console
from app.services.client_service import (
    list_all_clients,
    create_client_for_commercial,
    update_client_by_commercial,
    get_client_details
)
from app.utils.file_utils import load_token
from app.auth.jwt_utils import decode_token
from app.db.session import SessionLocal
from app.auth.permissions import role_required
from app.utils.config import CustomGroup

console = Console()


@click.group(
    name="clients",
    no_args_is_help=False,
    invoke_without_command=True,
    cls=CustomGroup
)
@click.pass_context
def clients_group(ctx):
    """Commandes pour g√©rer les clients."""
    if ctx.invoked_subcommand is None:  # Si aucune sous-commande n'est fournie
        console.print("[bold yellow]‚ùó Utilisez 'help' pour voir les commandes disponibles.[/bold yellow]")
        ctx.exit(1)


@clients_group.command(name="list")
@role_required(["gestion", "support", "commercial"])
@click.option(
    "-all", "all_clients", is_flag=True,
    help=(
        "Afficher tous les clients "
        "(uniquement pour gestionnaires et support)."
    )
)
def list_clients(all_clients):
    """
    Liste les clients disponibles dans le CRM.
    """
    token = load_token()
    if not token:
        console.print("[bold red]Erreur : Vous devez √™tre connect√© pour acc√©der √† cette commande.[/bold red]")
        return

    # D√©coder le token et v√©rifier le r√¥le
    payload = decode_token(token)
    if not payload:
        console.print("[bold red]Erreur : Token invalide ou expir√©. Veuillez vous reconnecter.[/bold red]")
        return

    role = payload.get("role")
    console.print(f"[bold cyan]R√¥le actuel : {role}[/bold cyan]")

    # Se connecter √† la base de donn√©es
    with SessionLocal() as db:
        try:
            clients = list_all_clients(db=db, token=token, all_clients=all_clients)

            if clients:
                mode = "TOUS" if all_clients else "MES CLIENTS"
                console.print(f"[bold green]Liste des clients ({mode}):[/bold green]")
                for client in clients:
                    console.print(
                        f"[bold yellow]ID {client.id}[/bold yellow] - "
                        f"{client.nom_complet} - {client.email} - {client.telephone}"
                    )
            else:
                console.print("[bold magenta]Aucun client trouv√©.[/bold magenta]")
        except Exception as e:
            console.print(f"[bold red]Erreur lors de la r√©cup√©ration des clients : {e}[/bold red]")


@clients_group.command(name="create")
@role_required(["commercial"])
def create_client():
    """
    Cr√©er un nouveau client en tant que commercial.
    """
    # Charger et v√©rifier le token JWT
    token = load_token()
    if not token:
        console.print("[bold red]Erreur : Vous devez √™tre connect√© pour cette commande.[/bold red]")
        return

    payload = decode_token(token)
    if not payload:
        console.print("[bold red]Erreur : Token invalide ou expir√©. Veuillez vous reconnecter.[/bold red]")
        return

    user_id = payload.get("user_id")
    role = payload.get("role")

    # V√©rifier que l'utilisateur est un commercial
    if role != "commercial":
        console.print("[bold red]Erreur : Seuls les commerciaux peuvent cr√©er un client.[/bold red]")
        return

    console.print(f"[bold cyan]üîπ Token valide - Utilisateur ID {user_id} - R√¥le : {role}[/bold cyan]")

    # Saisie des informations du client
    nom = click.prompt("Nom complet", type=str)
    email = click.prompt("Email", type=str)
    telephone = click.prompt("T√©l√©phone", type=str)
    entreprise = click.prompt("Nom de l'entreprise", type=str)

    # Connexion √† la base de donn√©es et cr√©ation du client
    with SessionLocal() as db:
        try:
            client = create_client_for_commercial(db, user_id, nom, email, telephone, entreprise)
            db.commit()
            console.print(f"[bold green] Client '{client.nom_complet}' cr√©√© avec succ√®s ![/bold green]")
        except Exception as e:
            db.rollback()
            console.print(f"[bold red] Erreur lors de la cr√©ation du client : {e}[/bold red]")


@clients_group.command(name="update")
@role_required(["commercial"])
def update_client():
    """
    Modifier un client existant en tant que commercial (uniquement ses propres clients).
    """
    # Charger le token JWT sauvegard√©
    token = load_token()
    if not token:
        console.print("[bold red]Erreur : Vous devez √™tre connect√© pour cette commande.[/bold red]")
        return

    # D√©coder le token pour extraire les informations
    payload = decode_token(token)
    if not payload:
        console.print("[bold red]Erreur : Token invalide ou expir√©. Veuillez vous reconnecter.[/bold red]")
        return

    role = payload.get("role")

    # V√©rifier si l'utilisateur a le bon r√¥le
    if role != "commercial":
        console.print("[bold red]Erreur : Seuls les commerciaux peuvent modifier un client.[/bold red]")
        return

    # Demander l'ID du client √† modifier
    client_id = click.prompt("ID du client √† modifier", type=int)

    # Demander les champs √† modifier (avec valeurs par d√©faut √† None)
    nom = click.prompt("Nouveau nom (laisser vide pour ne pas changer)", default="", type=str)
    email = click.prompt("Nouvel email (laisser vide pour ne pas changer)", default="", type=str)
    telephone = click.prompt("Nouveau t√©l√©phone (laisser vide pour ne pas changer)", default="", type=str)
    entreprise = click.prompt("Nouvelle entreprise (laisser vide pour ne pas changer)", default="", type=str)

    # Construire l'objet updates
    updates = {k: v for k, v in {
        "nom_complet": nom,
        "email": email,
        "telephone": telephone,
        "nom_entreprise": entreprise
    }.items() if v}

    if not updates:
        console.print("[bold yellow]Aucune modification apport√©e.[/bold yellow]")
        return

    # Mettre √† jour le client en base de donn√©es
    with SessionLocal() as db:
        try:
            client = update_client_by_commercial(db, token, client_id, **updates)
            if client:
                console.print(f"[bold green]Client ID {client.id} mis √† jour avec succ√®s ![/bold green]")
        except PermissionError as e:
            console.print(f"[bold red]Erreur d'autorisation : {e}[/bold red]")
        except ValueError as e:
            console.print(f"[bold red]Erreur : {e}[/bold red]")
        except Exception as e:
            console.print(f"[bold red]Erreur inattendue : {e}[/bold red]")


@clients_group.command(name="show")
@role_required(["gestion", "support", "commercial"])
@click.argument("client_id", type=int)
def show_client(client_id):
    """
    Affiche tous les d√©tails d'un client par son ID.
    """
    token = load_token()
    if not token:
        console.print("[bold red]Erreur : Vous devez √™tre connect√© pour cette commande.[/bold red]")
        return

    payload = decode_token(token)
    if not payload:
        console.print("[bold red]Erreur : Token invalide ou expir√©. Veuillez vous reconnecter.[/bold red]")
        return

    role = payload.get("role")
    user_id = payload.get("user_id")

    with SessionLocal() as db:
        try:
            client = get_client_details(db, client_id, user_id, role)
            if client:
                console.print(f"\n[bold green]üìã D√©tails complets du client ID {client.id} :[/bold green]")
                console.print(f"[bold yellow]Nom :[/bold yellow] {client.nom_complet}")
                console.print(f"[bold yellow]Email :[/bold yellow] {client.email}")
                console.print(f"[bold yellow]T√©l√©phone :[/bold yellow] {client.telephone}")
                console.print(f"[bold yellow]Entreprise :[/bold yellow] {client.nom_entreprise}")
                console.print(f"[bold yellow]Date de cr√©ation :[/bold yellow] {client.date_creation}")
                console.print(f"[bold yellow]Derni√®re mise √† jour :[/bold yellow] {client.date_derniere_mise_a_jour}")

                # ‚úÖ Afficher les d√©tails du commercial associ√©
                if client.commercial:
                    console.print("\n[bold cyan]Commercial associ√© :[/bold cyan]")
                    console.print(f"Nom : {client.commercial.nom}")
                    console.print(f"Pr√©nom : {client.commercial.prenom}")
                    console.print(f"Email : {client.commercial.email}")

                # ‚úÖ Afficher les contrats li√©s au client
                console.print("\n[bold cyan]Contrats li√©s :[/bold cyan]")
                if client.contrats:
                    for contrat in client.contrats:
                        console.print(f"- ID Contrat {contrat.id} : Montant Total {contrat.montant_total}‚Ç¨, Statut : {'Sign√©' if contrat.statut == True else 'Non sign√©'}")
                else:
                    console.print("[italic]Aucun contrat trouv√©.[/italic]")

            else:
                console.print("[bold magenta]Client non trouv√© ou acc√®s refus√©.[/bold magenta]")
        except PermissionError as e:
            console.print(f"[bold red]Erreur d'autorisation : {e}[/bold red]")
        except ValueError as e:
            console.print(f"[bold red]Erreur : {e}[/bold red]")
        except Exception as e:
            console.print(f"[bold red]Erreur inattendue : {e}[/bold red]")
